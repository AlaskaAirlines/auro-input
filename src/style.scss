// Copyright (c) 2020 Alaska Airlines. All right reserved. Licensed under the Apache-2.0 license
// See LICENSE in the project root for license information.

// ---------------------------------------------------------------------

/* stylelint-disable
  selector-max-class,
  scss/selector-no-redundant-nesting-selector,
  max-nesting-depth,
  selector-max-combinators,
  selector-max-compound-selectors,
  no-descending-specificity,
  at-rule-no-unknown,
  selector-no-qualifying-type,
  declaration-block-no-redundant-longhand-properties,
  declaration-no-important */

// Import Auro tokens
@import './../node_modules/@alaskaairux/design-tokens/dist/tokens/SCSSVariables';
@import './../node_modules/@alaskaairux/design-tokens/dist/tokens/SassCustomProperties';

@import './../node_modules/@alaskaairux/webcorestylesheets/dist/breakpoints';
@import './../node_modules/@alaskaairux/webcorestylesheets/dist/core';

// Support for auroElement styles
@import './../node_modules/@alaskaairux/webcorestylesheets/dist/auroElement/auroElement';

// container styles - defines the look of the outer custom component
:host {
  --size-lgsm: 1.875rem;
  --size-xlsm: 2.75rem;
  --size-mdxxs: 1.2rem;

  position: relative;
  display: block;

  cursor: text;
}

:host(:not(.hover)) {
  .inputElement {
    pointer-events: none;
  }
}

.passwordToggle {
  visibility: hidden;
}

.passwordIcon--show {
  .passwordToggle {
    cursor: pointer;
    visibility: visible;
  }
}

// this is to disable the toggle-password feature in MS Edge only
input {
  &::-ms-reveal,
  &::-ms-clear {
    display: none;
  }

  &::placeholder {
    color: transparent;
  }

  &:focus {
    &::placeholder {
      color: var(--auro-color-text-secondary-on-light);
    }
  }
}

.inputElement {
  position: relative;
  width: 100%;

  min-height: calc(var(--auro-size-700, 56px) + 2px);
  max-height: calc(var(--auro-size-700, 56px) + 2px);

  padding: var(--auro-size-400, 2rem);
  padding-right: var(--auro-size-100, .5rem);
  padding-bottom: var(--auro-size-100, .5rem);
  padding-left: 0;

  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;

  margin: 0;
  background-color: transparent;
  caret-color: var(--auro-color-text-secondary-on-light);
  font-family: var(--auro-font-family-default);
  font-size: 1rem;
  transition: all .3s cubic-bezier(.215, .61, .355, 1);
  outline: none;

  & ~ .iconContainer {
    background: none;

    .iconButton {
      z-index: auto;

      // This is needed because iOS chooses to
      // turn the icons blue
      color: var(--auro-color-text-primary-on-light);
    }
  }

  &:focus,
  &--filled {
    & + .inputElement-label {
      @extend %activeLabel;
    }
  }

  &:disabled {
    background: none;
    color: var(--auro-color-text-disabled-on-light);
  }
}

:host(:not([borderless])) {
  .inputElement {
    border-radius: 0;
    border: 0 solid;
    border-color: var(--auro-color-border-primary-on-light);
    border-bottom-width: 2px;

    &:disabled {
      border-color: var(--auro-color-border-disabled-on-light);
    }

    &:focus {
      border-color: var(--auro-color-ui-default-on-light);
    }
  }
}

:host([borderless]) {
  .inputElement {
    border: 0 solid;
    border-color: transparent;
    border-bottom-width: 2px;
  }
}

.inputElement-label {
  position: absolute;
  top: 0;
  left: 0;

  padding: 0;
  padding-top: 1.8rem;

  width: calc(100% - var(--auro-size-100, .5rem));

  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;

  color: var(--auro-color-text-secondary-on-light);
  pointer-events: none;
  transition: all .3s cubic-bezier(.215, .61, .355, 1);
}

.inputElement-labelIcon--no-value {
  left: var(--size-lgsm);
}

.inputElement-label--sticky {
  @extend %activeLabel;
}

.inputElement-helpText {
  margin: var(--auro-size-50, .25rem) 0;
  color: var(--auro-color-text-secondary-on-light);
  font-size: var(--auro-text-body-size-xs);
  line-height: 1rem;
}

.inputElement-icon {
  display: flex;
  justify-content: flex-end;
  pointer-events: auto;

  * {
    margin-left: var(--auro-size-100, .5rem);
  }
}

.iconButton {
  z-index: -1;
  padding: 0;
  border: none;
  margin: 0;
  background: none;

  &:active {
    z-index: auto;

    opacity: 1;
  }

  &:hover {
    cursor: pointer;
  }
}

.iconContainer {
  position: absolute;
  top: calc(2rem - .1rem);
  right: 0;

  pointer-events: none;
}

.is-disabled {
  color: var(--auro-color-text-disabled-on-light);
}

:host([disabled]) {
  color: var(--auro-color-text-disabled-on-light);
}

// =-=-=-=-=-=-=-=-= creditCard -=-=-=-=-=-=-=-=-=-=-=-=-

.inputIcon,
.creditCard {
  padding-left: var(--size-lgsm);
}

.accentIcon {
  position: absolute;
  top: 4px;
  left: 0;

  display: flex;
  height: var(--auro-size-400, 2rem);
  align-items: center;
  margin-top: var(--auro-size-300, 1.5rem);
}

// =-=-=-=-=-=-=-=-= Extends -=-=-=-=-=-=-=-=-=-=-=-=-

%activeLabel {
  left: 0;

  padding: 0;
  padding-top: var(--auro-size-50, .25rem);

  font-size: var(--auro-text-body-size-xs);
}

// =-=-=-=-=-=-=-=-= bordered -=-=-=-=-=-=-=-=-=-=-=-=-
:host([bordered][icon][type='credit-card']:focus-within),
:host([bordered][type='month-day-year']:focus-within),
:host([bordered][type='year-month-day']:focus-within),
:host([bordered][type='month-year']:focus-within),
:host([bordered][type='month-fullYear']:focus-within) {
  .inputElement {
    padding-left: var(--size-xlsm);
  }

  .inputElement-label {
    left: var(--size-xlsm);

    width: calc(100% - var(--size-xlsm) - 1.875rem);
  }

  .accentIcon {
    top: -6px;
    left: var(--auro-size-150, .75rem);
  }
}

:host([bordered][icon][type='credit-card']),
:host([bordered][type='month-day-year']),
:host([bordered][type='year-month-day']),
:host([bordered][type='month-year']),
:host([bordered][type='month-fullYear']) {
  .inputElement {
    padding-left: var(--size-xlsm);
  }

  .inputElement-label {
    left: var(--size-xlsm);

    width: calc(100% - 2.375rem - 1px - var(--auro-size-150, .75rem));
  }

  .accentIcon {
    top: -6px;
    left: var(--auro-size-150, .75rem);
  }
}

:host([icon][type='credit-card']:focus-within),
:host([type='month-day-year']:focus-within),
:host([type='year-month-day']:focus-within),
:host([type='month-year']:focus-within),
:host([type='month-fullYear']:focus-within) {
  .inputElement {
    padding-left: var(--size-xlsm);
  }

  .inputElement-label {
    left: var(--size-xlsm);

    width: calc(100% - var(--size-xlsm) - 1.875rem);
  }

  .accentIcon {
    top: -6px;
    left: var(--auro-size-150, .75rem);
  }
}

:host([icon][type='credit-card']),
:host([type='month-day-year']),
:host([type='year-month-day']),
:host([type='month-year']),
:host([type='month-fullYear']) {
  .inputElement {
    padding-left: var(--size-xlsm);
  }

  .inputElement-label {
    left: var(--size-xlsm);

    width: calc(100% - 2.375rem - 1px - var(--auro-size-150, .75rem));
  }

  .accentIcon {
    top: -6px;
    left: var(--auro-size-150, .75rem);
  }
}

:host([activeLabel]) {
  .inputElement {
    & + .inputElement-label {
      padding: 0;
      padding-top: var(--auro-size-50, .25rem);

      font-size: var(--auro-text-body-size-xs);
    }
  }

  label {
    left: var(--auro-size-150, .75rem);

    &[class*='inputElement-'] {
      left: var(--auro-size-150, .75rem);
    }

    &[class*='inputElement-labelIcon'] {
      left: var(--size-xlsm);
    }
  }
}

:host([bordered]) {
  .inputElement {
    padding-right: var(--auro-size-150, .75rem);
    padding-left: var(--auro-size-150, .75rem);
    border: 1px solid var(--auro-color-border-primary-on-light);
    border-radius: var(--auro-border-radius);
    background-color: var(--auro-color-base-white);

    &:focus {
      border-color: var(--auro-color-ui-default-on-light);

      @include auro_breakpoint--sm {
        box-shadow: inset 0 0 0 1px var(--auro-color-ui-default-on-light);
      }
    }

    &:disabled {
      border-color: var(--auro-color-alert-disabled-on-light);

      @include auro_breakpoint--sm {
        box-shadow: inset 0 0 0 1px var(--auro-color-alert-disabled-on-light);
      }
    }

    &:focus,
    &--filled {
      & + .inputElement-label {
        padding-top: var(--auro-size-50, .25rem);
      }
    }
  }

  .inputElement-label {
    left: var(--auro-size-150, .75rem);
    padding-top: var(--size-mdxxs);

    width: calc(100% - var(--auro-size-150, .75rem) - 1px - var(--auro-size-150, .75rem));

    &--sticky {
      padding-top: var(--auro-size-50, .25rem);
    }
  }

  .iconContainer {
    top: var(--size-mdxxs);
    right: var(--auro-size-150, .75rem);
  }
}

:host([type='password']:focus-within) {
  .inputElement {
    padding-right: 68px;
  }

  .inputElement-label {
    width: calc(100% - 68px);
  }
}

:host([bordered][type='password']:focus-within) {
  .inputElement {
    padding-right: 72px;
  }

  .inputElement-label {
    width: calc(100% - 86px);
  }
}

/**
 * Invalid state styles
 * valid attribute is not present on the element until after
 * validation is wrong the first time. A required HTML5 input
 * starts with the :invalid pseudo-selector even if our
 * validation script has not been run.
 */
:host(:not([validity])) {
  .alertIcon {
    display: none;
  }
}

:host([validity]:not([validity='valid'])) {
  .inputElement {
    border-color: var(--auro-color-alert-error-on-light);

    @include auro_breakpoint--sm {
      box-shadow: inset 0 0 0 1px var(--auro-color-alert-error-on-light);
    }
  }

  .inputElement-helpText {
    color: var(--auro-color-alert-error-on-light);
  }

  .iconContainer {
    color: var(--auro-color-alert-error-on-light);
  }
}

:host([validity='customError']) {
  .inputElement {
    border-color: var(--auro-color-alert-error-on-light) !important;

    @include auro_breakpoint--sm {
      box-shadow: inset 0 0 0 1px var(--auro-color-alert-error-on-light);
    }
  }
}

:host([error]) {
  .inputElement {
    padding-right: 1.875rem;
  }

  .inputElement-label {
    width: calc(100% - 1.875rem);
  }
}

// Hide and show visibility of the icon button
:host(:not([error])),
:host([validity]:not([validity='valid'])),
:host(:not(:focus-within)),
:host(:not(:hover)) {
  .iconButton {
    opacity: 0;
  }
}

:host([error]),
:host([validity]:not([validity='valid'])),
:host(:focus-within),
:host(:hover) {
  .iconButton {
    opacity: 1;
  }
}

// Handle element right padding for icons depending on icon visibility
:host(:not([bordered])[error]),
:host(:not([bordered][validity]):not([validity='valid'])),
:host(:not([bordered]):focus-within),
:host(:not([bordered]):hover) {
  .inputElement {
    padding-right: 2rem;
  }

  .inputElement-label {
    width: calc(100% - 2rem);
  }
}

:host([bordered][error]),
:host([bordered][validity]:not([validity='valid'])),
:host([bordered]:focus-within),
:host([bordered]:hover) {
  .inputElement {
    padding-right: 2.75rem;
  }

  .inputElement-label {
    width: calc(100% - 2.75rem - var(--auro-size-150, .75rem));
  }
}
